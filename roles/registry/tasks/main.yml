- name: 安装httpd工具
  yum: name={{item}} state=present
  with_items:
    - httpd
    - httpd-tools

- name: make registry dir
  file: path={{ item }} state=directory owner={{REG_USER}} group={{REG_USER_GROUP}} mode=0755
  with_items:
    - "{{REG_CONF_DIR}}"
    - "{{REG_DATA_DIR}}"

- name: 分发registry二进制文件
  copy: src={{ base_dir }}/packages/bin/registry dest={{ bin_dir }}/registry mode=0755
  tags: upgrade_k8s

- name: copy registry config
  template: src="{{item.src}}.j2" dest="{{item.dest}}/{{item.src}}" owner={{REG_USER}} group={{REG_USER_GROUP}} mode=0755
  with_items:
    - { src: "config.yml", dest: "{{REG_CONF_DIR}}" }
    - { src: "start.sh", dest: "{{REG_USER_HOME_DIR}}" }
    - { src: "stop.sh", dest: "{{REG_USER_HOME_DIR}}" }
    - { src: "registry-reg.sh", dest: "{{REG_SCRIPTS_DIR}}" }

- name: mkdir /etc/pki/registry
  file: path={{item}} state=directory mode=0755
  with_items:
    - '/etc/pki/registry'
    - '/etc/docker/certs.d/{{DOCKER_REG_DOMAIN}}:{{REG_PORT}}'

- include: "create-ca.yml"

- name: create pki
  unarchive: src={{ item }} dest=/etc/pki/registry mode=0755 copy=no
  with_items:
    - /tmp/cert/cert.tar

- name: fetch ca from registry
  fetch: src={{ item }} dest=/tmp/ mode=0755 flat=yes
  with_items:
    - /tmp/cert/cert.tar
    - /etc/pki/registry/{{DOCKER_REG_DOMAIN}}.crt

- name: Build hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ DOCKER_REG_DOMAIN }}$'
    line: '{{item}} {{ DOCKER_REG_DOMAIN }}'
    state: present
  with_items: '{{ groups["Docker-registry"] }}'

- name: cp cert_file to /etc/docker/certs.d
  shell: cp /etc/pki/registry/{{DOCKER_REG_DOMAIN}}.crt /etc/docker/certs.d/{{DOCKER_REG_DOMAIN}}:{{REG_PORT}}/ca.crt

- include: "start_rg.yml"

- name: mkdir DBScale
  file: path=/DBScale/ state=directory
